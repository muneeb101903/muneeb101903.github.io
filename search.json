[
  {
    "objectID": "blog/markdown/index.html",
    "href": "blog/markdown/index.html",
    "title": "Markdown formatting",
    "section": "",
    "text": "Markdown is very simple, and many sites, like Reddit, Stackoverflow, or even Discord use some variation of markdown formatting.\nBelow is the Markdown from the presentation, copied and pasted here."
  },
  {
    "objectID": "blog/markdown/index.html#markdown",
    "href": "blog/markdown/index.html#markdown",
    "title": "Markdown formatting",
    "section": "Markdown",
    "text": "Markdown\n\nMarkdown is markup language\nEnables users to render formatted documents from plaintext\nMost static site generators use markdown"
  },
  {
    "objectID": "blog/markdown/index.html#markdown-code-snippets",
    "href": "blog/markdown/index.html#markdown-code-snippets",
    "title": "Markdown formatting",
    "section": "Markdown Code Snippets",
    "text": "Markdown Code Snippets\n\n`this is code snippets`\n\nThey result in unformated, monospace text:\n\nthis is code snippets"
  },
  {
    "objectID": "blog/markdown/index.html#markdown-basics",
    "href": "blog/markdown/index.html#markdown-basics",
    "title": "Markdown formatting",
    "section": "Markdown Basics",
    "text": "Markdown Basics\n*italics* = italics\n**bold** = bold\n[linktext](example.com) = linktext"
  },
  {
    "objectID": "blog/markdown/index.html#more-markdwon-basics",
    "href": "blog/markdown/index.html#more-markdwon-basics",
    "title": "Markdown formatting",
    "section": "More Markdwon Basics",
    "text": "More Markdwon Basics\n\n# top level header\n\ntop level header\n\n\n## lower level header\n\nlower level header"
  },
  {
    "objectID": "blog/markdown/index.html#useful-html-in-markdown",
    "href": "blog/markdown/index.html#useful-html-in-markdown",
    "title": "Markdown formatting",
    "section": "Useful HTML in Markdown",
    "text": "Useful HTML in Markdown\n&lt;br&gt; = line break\n\n&lt;details&gt;&lt;summary&gt;summary text&lt;/summary&gt;\n\ncollapsable content\n\n&lt;/details&gt;\n\n\n\nsummary text\n\ncollapsable content"
  },
  {
    "objectID": "blog/markdown/index.html#code-blocks",
    "href": "blog/markdown/index.html#code-blocks",
    "title": "Markdown formatting",
    "section": "Code Blocks",
    "text": "Code Blocks\nIt’s possible to do code blocks with langauge highlighting.\nThis:\n\\`\\`\\`{.python}\nprint(\"hellow world!\")\n\ndef testfunction(input):\n    print(\"Hi!\")\n\\`\\`\\`\nResults in:\nprint(\"hellow world!\")\n\ndef testfunction(input):\n    print(\"Hi!\")\nMany, many languages are supported and can be highlighted.\nImages:\n![alt text](https://quarto.org/quarto.png)\n\n\n\nalt text\n\n\nOf course, this is an external image. You an also store images in the repository, and then refer to them by the relative file path. Something like:\n![](../image.png)\nWhere .. goes up one directory, and then you can refer to files by their file path.\nMore information about markdown: https://quarto.org/docs/authoring/markdown-basics.html"
  },
  {
    "objectID": "blog/Caddy/index.html",
    "href": "blog/Caddy/index.html",
    "title": "Debian WordPress Deployment",
    "section": "",
    "text": "What Is WordPress\n\nWordPress is a free and open-source content management system (CMS) used to create and manage websites.\nWhat You Can Do with WordPress: -Create blogs, personal websites, portfolios -Build business sites, online stores (with WooCommerce) -Publish articles, manage media, users, and comments -Use themes to change appearance -Use plugins to add functionality (e.g. contact forms, SEO, backups)\n\nWhy Should You use WordPress\n\n\nNo Coding Needed (But It’s Developer-Friendly)\nIt’s Free and Open Source\nThousands of Themes and Plugins\nBuilt for SEO\nYou Can Build Anything\nScalable & Flexible\nRegular Updates & Security\nGlobal Community\n\n\nThe Steps\n\nIn order to deploy WordPress through Caddy on Debian you are going to need to do the following:\nInstal PHP and Required Extensions\nsudo apt update\nsudo apt install php php-fpm php-mysql php-curl php-gd php-mbstring php-xml php-xmlrpc php-soap php-intl php-zip unzip curl -y\n\nInstall Docker\nsudo apt-get install docker\nsudo systemctl enable docker --now\n\nStart MariaDB in a container\ndocker run -d \\\n  --name wordpress-db \\\n  -e MYSQL_ROOT_PASSWORD=rootpassword \\\n  -e MYSQL_DATABASE=wordpress \\\n  -e MYSQL_USER=wpuser \\\n  -e MYSQL_PASSWORD=wppassword \\\n  -p 3306:3306 \\\n  mariadb:latest\n\nInstall Caddy Web Server\nsudo apt install -y debian-keyring debian-archive-keyring curl\ncurl -1sLf 'https://dl.cloudsmith.io/public/caddy/stable/gpg.key' | sudo gpg --dearmor -o /usr/share/keyrings/caddy-stable-archive-keyring.gpg\ncurl -1sLf 'https://dl.cloudsmith.io/public/caddy/stable/debian.deb.txt' | sudo tee /etc/apt/sources.list.d/caddy-stable.list\nsudo apt update\nsudo apt install caddy\n\nDownload and Configure WordPress\ncd /var/www/\nsudo curl -O https://wordpress.org/latest.tar.gz\nsudo tar -xvzf latest.tar.gz\nsudo chown -R www-data:www-data wordpress\nsudo chmod -R 755 wordpress\n\nCopy Sample config\ncd wordpress\ncp wp-config-sample.php wp-config.php\n\nEdit wp-config.php\ndefine( 'DB_NAME', 'wordpress' );\ndefine( 'DB_USER', 'wpuser' );\ndefine( 'DB_PASSWORD', 'wppassword' );\ndefine( 'DB_HOST', '127.0.0.1:3306' ); // Docker container exposes this\n\nConfigure Caddy and Edit /etc/caddy/Caddyfile\n:80 {\n    root * /var/www/wordpress\n    php_fastcgi unix//run/php/php-fpm.sock\n    encode gzip\n    file_server\n}\n\nThen reload Caddy\nsudo systemctl reload caddy"
  },
  {
    "objectID": "blog/RocketChat/index.html",
    "href": "blog/RocketChat/index.html",
    "title": "Debian RocketChat Deployment",
    "section": "",
    "text": "What’s RocketChat?\n\nRocket.Chat is a chat server you can run on your own machine or server that allows:\nReal-time messaging (channels, private DMs)\nFile sharing\nVideo/audio calls (with add-ons)\nNotifications\nAdmin control\nIntegration with other tools\nSimilar to Slack, Microsoft Teams and Discord\n\nWhy should you use RocketChat?\n\nYou should consider using Rocket.Chat if you want secure, customizable, team-based communication software that you fully control — without the vendor lock-in or data privacy concerns of tools like Slack, Discord, or Microsoft Teams.\nFor example it has: 1. Full Data Ownership and Privacy 2. Highly Customizable 3. Integration with your Tools 4. Multi-Platform Access 5. No Vendor Lock-in or Monthly Fees 6. Great for Learning and IT Practice\n\nThe Steps\n\nIn order to deploy RocketChat on Debian with Docker you need to first update your machine\nsudo apt-get update\nThen install the Docker application\nsudo apt-get install docker\nAfterwards install the required packages for docker\nsudo apt install apt-transport-https ca-certificates curl gnupg lsb-release\nNext add Docker’s official GPG Key\ncurl -fsSL https://download.docker.com/linux/debian/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg\nYou will need to setup a stable Docker Repository by running this command\necho \"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] \\ https://download.docker.com/linux/debian $(lsb_release -cs) stable\" | \\ sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null\nThen Update and install Docker:\nsudo apt update\nsudo apt install docker-ce docker-ce-cli containerd.io\n\nStart and Enable the Docker Service:\nsudo systemctl start docker\nsudo systemctl enable docker\n\nNow that you have Docker installed and setup, you need Deploy RocketChat\nFirst you are going to need to create a directory for RocketChat\nmkdir rocketchat-deploy && cd rocketchat-deploy\nNext create a YAML file\nvim docker-compose.yml\nAfterwards paste the following content into the YAML file:\nversion: '3'\n\nservices:\n  mongo:\n    image: mongo:5.0\n    container_name: mongo\n    restart: unless-stopped\n    command: mongod --replSet rs0 --oplogSize 128\n    volumes:\n      - ./data/db:/data/db\n\n  mongo-init-replica:\n    image: mongo:5.0\n    container_name: mongo-init-replica\n    depends_on:\n      - mongo\n    entrypoint: &gt;\n      bash -c \"sleep 5 && \n      mongo --host mongo:27017 --eval '\n        rs.initiate({_id: \\\"rs0\\\", members: [{_id: 0, host: \\\"mongo:27017\\\"}]})'\"\n    restart: \"no\"\n\n  rocketchat:\n    image: rocketchat/rocket.chat:latest\n    container_name: rocketchat\n    restart: unless-stopped\n    depends_on:\n      - mongo\n      - mongo-init-replica\n    environment:\n      - MONGO_URL=mongodb://mongo:27017/rocketchat?replicaSet=rs0\n      - MONGO_OPLOG_URL=mongodb://mongo:27017/local?replicaSet=rs0\n      - ROOT_URL=http://localhost:3000\n      - PORT=3000\n    ports:\n      - 3000:3000\n\n\nNow Install Docker Compose\nsudo apt update\nsudo apt install docker-compose-plugin -y\n\nNow Start the containers\nsudo docker compose up -d\nWait a couple of minutes for RocketChat to Initialize\nAnd there you go, that’s how you deploy RocketChat using Docker on a Debian based machine."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Muhammad Kamal",
    "section": "",
    "text": "This is a my personal blog.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites."
  },
  {
    "objectID": "blog/index.html",
    "href": "blog/index.html",
    "title": "Blog",
    "section": "",
    "text": "Debian WordPress Deployment\n\n\n\nTutorials\n\n\n\nThis guide will help deploy WordPress on Debian with Caddy\n\n\n\n\n\nAug 2, 2025\n\n\n\n\n\n\n\n\n\n\n\n\nDebian RocketChat Deployment\n\n\n\nTutorials\n\n\n\nThis guide will help deploy RocketChat on Debian with Docker\n\n\n\n\n\nFeb 23, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nMarkdown formatting\n\n\n\nfilter2\n\nfilter3\n\n\n\ndescription\n\n\n\n\n\nFeb 23, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n.qmd and python jupyter blocks\n\n\n\nfilter1\n\nfilter2\n\n\n\ndescription\n\n\n\n\n\nFeb 20, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nAbout Quarto\n\n\n\nfilter1\n\nfilter2\n\n\n\ndescription\n\n\n\n\n\nFeb 20, 2024\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "blog/qmd/index.html",
    "href": "blog/qmd/index.html",
    "title": ".qmd and python jupyter blocks",
    "section": "",
    "text": "What are qmd files?\n.qmd files are files special to quarto. The short version of it is that quarto renders these files, which are essentially markdown files, to jupyter notebooks, where it then executes and renders any python code.\n\n\nExamples\n\nprint(\"Hello World!\")\n\nprint(3 + 2)\n\nHello World!\n5\n\n\nQuarto is designed for data science, and this means having executable code blocks that do something. For example, Quarto can use matplotlib in python to plot things.\nWhere things get interesting is the combination of three factors:\n\nThe output of these code blocks can be done as plain text, rather than a code block, by putting #| output: asis at the beginning of the code block.\nThe plain text output by these code blocks, is done before the markdown is rendered to other formats.\nIt’s possible to hide the code blocks but not the output, by putting #| echo: false at the beginning of the code block itself\n\nWhat this means, is that python can essentially act as a formatting engine, for generating dynamic content. Even things like using.\n#| output: asis\n#| echo: false\n\ndef make_bullets(list):\n  bulletlist = f''''''\n  for i in list:\n    bulletlist = bulletlist + \"* \"\n    bulletlist = bulletlist + i\n    bulletlist = bulletlist + \"\\n\"\n  print(bulletlist)\n\nsample_list = [\n  \"Item 1\",\n  \"Item 2\",\n  \"Item 3\"\n]\n\nmake_bullets(sample_list)\nWhich renders to:\n\nItem 1\nItem 2\nItem 3\n\nIt should be noted that I am actually using two code blocks here, one which does not execute, and does not hide itself, and another which executes and hides itself.\nYou can get even more dynamic content, if you use something like python requests to pull it as you render the site. Again, it is a bit hacky since backticks would render into a code block, so here I multiply one backticks times 3 to get a string containing 3 backticks, but it does work.\n#| output: asis\n#| echo: false\n\nimport requests\nbackticks = \"`\" * 3\n\nprint(f'''\n\n{backticks}{{.nix .code-overflow-wrap filename=home.nix}}\n{requests.get('https://raw.githubusercontent.com/ErikMcClure/bad-licenses/3c26bef3028fa8470308c493af7d7eae152a19ba/overwatch').text}\n{backticks}\n\n''')\n\n\nhome.nix\n\n                     Overwatch License Revision 2\n                          (c) Author, year\n\n\nPermission is hereby granted, free of charge, for anyone to use, distribute, or\nsell the compiled binaries, source code, and documentation (the \"Software\")\nwithout attribution.\n\nPermission to modify the Software is only granted to those that have a higher\ncompetitive matchmaking rank than the copyright holder in Overwatch 2\n(Blizzard, 2022).\n\nThe Software is provided in the hope that some will find it useful, but the\nSoftware comes under NO WARRANTY, EXPRESS OR IMPLIED, and the authors of the\nSoftware are NOT LIABLE IN THE EVENT OF LOSSES, DAMAGES OR MISUSE relating to\nthe Software."
  },
  {
    "objectID": "blog/quarto/index.html",
    "href": "blog/quarto/index.html",
    "title": "About Quarto",
    "section": "",
    "text": "Quarto is the static site generator used to render this site.\nIt’s documentation is very extensive, and worth reading.\nInteresting/Important bits:\nQuarto has a built in category system\nThis enables users to filter documents by types.\nTheming: https://quarto.org/docs/output-formats/html-themes.html\nAt the top right of this page, there is a toggle between light and dark theme. You can edit the _quarto.yml file to edit the themes used.\nPlugins/Extensions: https://quarto.org/docs/extensions/\nPlugins add functionality to quarto, like being able to embed QR Codes.\nWeb based slides: https://quarto.org/docs/presentations/revealjs/\nI used Reveal JS slides for the presentation\nUnder the hood, Quarto uses Pandoc and supports all of it’s features."
  }
]